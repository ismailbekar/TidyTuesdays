geom_rect(mapping=aes(xmin=0.45, xmax=0.60, ymin=0.60, ymax=0.95), fill="firebrick2", size= 0.001, alpha=0.002) +
geom_rect(mapping=aes(xmin=0.45, xmax=0.95, ymin=0.45, ymax=0.60),  fill="firebrick2", size= 0.001, alpha=0.002) +
guides(fill = guide_legend(override.aes = list(alpha=0.2))) +
theme(axis.text = element_text(size=14),
axis.title=element_text(size=13,face="bold"),
legend.title=element_text(size=15, face = "bold"),
legend.text=element_text(size=15),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size = 13, face = "bold"),
panel.border = element_rect(colour = "black")) +
scale_fill_manual("Model Performance", labels= c("Poor", "Moderate", "Good"))
library(dplyr)
library(ggplot2)
library(ggrepel)
plot2 <- ggplot(data= AUC_base, aes(x=model.auc, y=transfer.auc, color= TM_axis, shape= TA_axis)) +
geom_point(size= 9) +
labs(caption= "Red: Poor Performance, Yellow: Moderate Performance, Green: Good Performance") +
scale_colour_discrete(name = "Model") +
scale_shape_discrete(name= "Target Area") +
scale_x_continuous("AUC values of the original models", limits = c(0.45, 0.95)) +
scale_y_continuous("AUC values in transfer regions", limits = c(0.45, 0.95)) +
geom_segment(x= 0, y= 0, xend= 1, yend= 1, color= "black", size= 0.01) +
facet_wrap(~ Resolution) +
theme_bw() +
theme(axis.text=element_text(size=10),
axis.title=element_text(size=10, face="bold"),
legend.text=element_text(size=12))
plot2 + geom_rect(mapping=aes(xmin=0.70, xmax=0.95, ymin=0.70, ymax=0.95), fill="green", size= 0.001, alpha=0.002) +
geom_rect(mapping=aes(xmin=0.60, xmax=0.95, ymin=0.60, ymax=0.70),  fill="gold2", size= 0.001, alpha=0.002) +
geom_rect(mapping=aes(xmin=0.60, xmax=0.70, ymin=0.70, ymax=0.95), fill="gold2", size= 0.001, alpha=0.002) +
geom_rect(mapping=aes(xmin=0.45, xmax=0.60, ymin=0.60, ymax=0.95), fill="firebrick2", size= 0.001, alpha=0.002) +
geom_rect(mapping=aes(xmin=0.45, xmax=0.95, ymin=0.45, ymax=0.60),  fill="firebrick2", size= 0.001, alpha=0.002) +
guides(fill = guide_legend(override.aes = list(alpha=0.2))) +
theme(axis.text = element_text(size=14),
axis.title=element_text(size=13,face="bold"),
legend.title=element_text(size=15, face = "bold"),
legend.text=element_text(size=15),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size = 13, face = "bold"),
panel.border = element_rect(colour = "black")) +
scale_fill_manual("Model Performance", labels= c("Poor", "Moderate", "Good"))
AUC <- AUC_df %>%
mutate(test.auc = round(test.auc, 3)) %>%
mutate(model.auc = case_when(!grepl("_to_", AUC_df$M.name) ~ AUC_df$test.auc)) %>%
mutate(transfer.auc = case_when(grepl("_to_", AUC_df$M.name) ~ AUC_df$test.auc,
!grepl("_to_", AUC_df$M.name) ~ AUC_df$test.auc)) %>%
mutate(Alpha = if_else(AUC_df$TM_axis == "GR" | AUC_df$TM_axis == "VS" | AUC_df$TM_axis == "TI", "Sub-regional model", "Base model"))
AUC <- AUC %>%
mutate(model.auc = case_when(grepl("CH$", AUC$M.name) & grepl("Coarse.AUC", AUC$Resolution) ~ filter(AUC, M.name == "CH" & Resolution == "Coarse.AUC")[1,2],
grepl("SPA$", AUC$M.name) & grepl("Coarse.AUC", AUC$Resolution) ~ filter(AUC, M.name == "SPA" & Resolution == "Coarse.AUC")[1,2],
grepl("AU$", AUC$M.name) & grepl("Coarse.AUC", AUC$Resolution) ~ filter(AUC, M.name == "AU" & Resolution == "Coarse.AUC")[1,2],
grepl("TR$", AUC$M.name) & grepl("Coarse.AUC", AUC$Resolution) ~ filter(AUC, M.name == "TR" & Resolution == "Coarse.AUC")[1,2],
grepl("CR$", AUC$M.name) & grepl("Coarse.AUC", AUC$Resolution) ~ filter(AUC, M.name == "CR" & Resolution == "Coarse.AUC")[1,2],
grepl("GR$", AUC$M.name) & grepl("Coarse.AUC", AUC$Resolution) ~ filter(AUC, M.name == "GR" & Resolution == "Coarse.AUC")[1,2],
grepl("TI$", AUC$M.name) & grepl("Coarse.AUC", AUC$Resolution) ~ filter(AUC, M.name == "TI" & Resolution == "Coarse.AUC")[1,2],
grepl("VS$", AUC$M.name) & grepl("Coarse.AUC", AUC$Resolution) ~ filter(AUC, M.name == "VS" & Resolution == "Coarse.AUC")[1,2],
grepl("CH$", AUC$M.name) & grepl("Fine.AUC", AUC$Resolution) ~ filter(AUC, M.name == "CH" & Resolution == "Fine.AUC")[1,2],
grepl("SPA$", AUC$M.name) & grepl("Fine.AUC", AUC$Resolution) ~ filter(AUC, M.name == "SPA" & Resolution == "Fine.AUC")[1,2],
grepl("AU$", AUC$M.name) & grepl("Fine.AUC", AUC$Resolution) ~ filter(AUC, M.name == "AU" & Resolution == "Fine.AUC")[1,2],
grepl("TR$", AUC$M.name) & grepl("Fine.AUC", AUC$Resolution) ~ filter(AUC, M.name == "TR" & Resolution == "Fine.AUC")[1,2],
grepl("CR$", AUC$M.name) & grepl("Fine.AUC", AUC$Resolution) ~ filter(AUC, M.name == "CR" & Resolution == "Fine.AUC")[1,2],
grepl("GR$", AUC$M.name) & grepl("Fine.AUC", AUC$Resolution) ~ filter(AUC, M.name == "GR" & Resolution == "Fine.AUC")[1,2],
grepl("TI$", AUC$M.name) & grepl("Fine.AUC", AUC$Resolution) ~ filter(AUC, M.name == "TI" & Resolution == "Fine.AUC")[1,2],
grepl("VS$", AUC$M.name) & grepl("Fine.AUC", AUC$Resolution) ~ filter(AUC, M.name == "VS" & Resolution == "Fine.AUC")[1,2]))
AUC_base <- AUC %>%
filter(TM_axis %in% c("AU", "CH", "SPA", "TR", "CR")) %>%
filter(TA_axis %in% c("AU", "CH", "SPA", "TR", "CR")) # %>%
plot2 <- ggplot(data= AUC_base, aes(x=model.auc, y=transfer.auc, color= TM_axis, shape= TA_axis)) +
geom_point(size= 9) +
labs(caption= "Red: Poor Performance, Yellow: Moderate Performance, Green: Good Performance") +
scale_colour_discrete(name = "Model") +
scale_shape_discrete(name= "Target Area") +
scale_x_continuous("AUC values of the original models", limits = c(0.45, 0.95)) +
scale_y_continuous("AUC values in transfer regions", limits = c(0.45, 0.95)) +
geom_segment(x= 0, y= 0, xend= 1, yend= 1, color= "black", size= 0.01) +
facet_wrap(~ Resolution) +
theme_bw() +
theme(axis.text=element_text(size=10),
axis.title=element_text(size=10, face="bold"),
legend.text=element_text(size=12))
plot2 + geom_rect(mapping=aes(xmin=0.70, xmax=0.95, ymin=0.70, ymax=0.95), fill="green", size= 0.001, alpha=0.002) +
geom_rect(mapping=aes(xmin=0.60, xmax=0.95, ymin=0.60, ymax=0.70),  fill="gold2", size= 0.001, alpha=0.002) +
geom_rect(mapping=aes(xmin=0.60, xmax=0.70, ymin=0.70, ymax=0.95), fill="gold2", size= 0.001, alpha=0.002) +
geom_rect(mapping=aes(xmin=0.45, xmax=0.60, ymin=0.60, ymax=0.95), fill="firebrick2", size= 0.001, alpha=0.002) +
geom_rect(mapping=aes(xmin=0.45, xmax=0.95, ymin=0.45, ymax=0.60),  fill="firebrick2", size= 0.001, alpha=0.002) +
guides(fill = guide_legend(override.aes = list(alpha=0.2))) +
theme(axis.text = element_text(size=14),
axis.title=element_text(size=13,face="bold"),
legend.title=element_text(size=15, face = "bold"),
legend.text=element_text(size=15),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size = 13, face = "bold"),
panel.border = element_rect(colour = "black")) +
scale_fill_manual("Model Performance", labels= c("Poor", "Moderate", "Good"))
View(AUC_base)
AUC_base <- AUC %>%
filter(TA_axis %in% c("CR"))
View(AUC_base)
AUC_base <- AUC %>%
filter(TM_axis %in% c("AU", "CH", "SPA", "TR", "CR")) %>%
filter(TA_axis %in% c("AU", "CH", "SPA", "TR", "CR")) %>%
filter(!TA_axis %in% c("CR"))
plot2 <- ggplot(data= AUC_base, aes(x=model.auc, y=transfer.auc, color= TM_axis, shape= TA_axis)) +
geom_point(size= 9) +
labs(caption= "Red: Poor Performance, Yellow: Moderate Performance, Green: Good Performance") +
scale_colour_discrete(name = "Model") +
scale_shape_discrete(name= "Target Area") +
scale_x_continuous("AUC values of the original models", limits = c(0.45, 0.95)) +
scale_y_continuous("AUC values in transfer regions", limits = c(0.45, 0.95)) +
geom_segment(x= 0, y= 0, xend= 1, yend= 1, color= "black", size= 0.01) +
facet_wrap(~ Resolution) +
theme_bw() +
theme(axis.text=element_text(size=10),
axis.title=element_text(size=10, face="bold"),
legend.text=element_text(size=12))
plot2 + geom_rect(mapping=aes(xmin=0.70, xmax=0.95, ymin=0.70, ymax=0.95), fill="green", size= 0.001, alpha=0.002) +
geom_rect(mapping=aes(xmin=0.60, xmax=0.95, ymin=0.60, ymax=0.70),  fill="gold2", size= 0.001, alpha=0.002) +
geom_rect(mapping=aes(xmin=0.60, xmax=0.70, ymin=0.70, ymax=0.95), fill="gold2", size= 0.001, alpha=0.002) +
geom_rect(mapping=aes(xmin=0.45, xmax=0.60, ymin=0.60, ymax=0.95), fill="firebrick2", size= 0.001, alpha=0.002) +
geom_rect(mapping=aes(xmin=0.45, xmax=0.95, ymin=0.45, ymax=0.60),  fill="firebrick2", size= 0.001, alpha=0.002) +
guides(fill = guide_legend(override.aes = list(alpha=0.2))) +
theme(axis.text = element_text(size=14),
axis.title=element_text(size=13,face="bold"),
legend.title=element_text(size=15, face = "bold"),
legend.text=element_text(size=15),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size = 13, face = "bold"),
panel.border = element_rect(colour = "black")) +
scale_fill_manual("Model Performance", labels= c("Poor", "Moderate", "Good"))
AUC_base <- AUC %>%
filter(TM_axis %in% c("AU", "CH", "SPA", "TR", "CR")) %>%
filter(TA_axis %in% c("AU", "CH", "SPA", "TR"))
plot2 <- ggplot(data= AUC_base, aes(x=model.auc, y=transfer.auc, color= TM_axis, shape= TA_axis)) +
geom_point(size= 9) +
labs(caption= "Red: Poor Performance, Yellow: Moderate Performance, Green: Good Performance") +
scale_colour_discrete(name = "Model") +
scale_shape_discrete(name= "Target Area") +
scale_x_continuous("AUC values of the original models", limits = c(0.45, 0.95)) +
scale_y_continuous("AUC values in transfer regions", limits = c(0.45, 0.95)) +
geom_segment(x= 0, y= 0, xend= 1, yend= 1, color= "black", size= 0.01) +
facet_wrap(~ Resolution) +
theme_bw() +
theme(axis.text=element_text(size=10),
axis.title=element_text(size=10, face="bold"),
legend.text=element_text(size=12))
plot2 + geom_rect(mapping=aes(xmin=0.70, xmax=0.95, ymin=0.70, ymax=0.95), fill="green", size= 0.001, alpha=0.002) +
geom_rect(mapping=aes(xmin=0.60, xmax=0.95, ymin=0.60, ymax=0.70),  fill="gold2", size= 0.001, alpha=0.002) +
geom_rect(mapping=aes(xmin=0.60, xmax=0.70, ymin=0.70, ymax=0.95), fill="gold2", size= 0.001, alpha=0.002) +
geom_rect(mapping=aes(xmin=0.45, xmax=0.60, ymin=0.60, ymax=0.95), fill="firebrick2", size= 0.001, alpha=0.002) +
geom_rect(mapping=aes(xmin=0.45, xmax=0.95, ymin=0.45, ymax=0.60),  fill="firebrick2", size= 0.001, alpha=0.002) +
guides(fill = guide_legend(override.aes = list(alpha=0.2))) +
theme(axis.text = element_text(size=14),
axis.title=element_text(size=13,face="bold"),
legend.title=element_text(size=15, face = "bold"),
legend.text=element_text(size=15),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size = 13, face = "bold"),
panel.border = element_rect(colour = "black")) +
scale_fill_manual("Model Performance", labels= c("Poor", "Moderate", "Good"))
ggsave("~/Desktop/Graphs/Transferability/Transferability_paper.png")
plot2 + geom_rect(mapping=aes(xmin=0.70, xmax=0.95, ymin=0.70, ymax=0.95), fill="green", size= 0.001, alpha=0.03) +
geom_rect(mapping=aes(xmin=0.60, xmax=0.95, ymin=0.60, ymax=0.70),  fill="gold2", size= 0.001, alpha=0.03) +
geom_rect(mapping=aes(xmin=0.60, xmax=0.70, ymin=0.70, ymax=0.95), fill="gold2", size= 0.001, alpha=0.03) +
geom_rect(mapping=aes(xmin=0.45, xmax=0.60, ymin=0.60, ymax=0.95), fill="firebrick2", size= 0.001, alpha=0.03) +
geom_rect(mapping=aes(xmin=0.45, xmax=0.95, ymin=0.45, ymax=0.60),  fill="firebrick2", size= 0.001, alpha=0.03) +
guides(fill = guide_legend(override.aes = list(alpha=0.2))) +
theme(axis.text = element_text(size=14),
axis.title=element_text(size=13,face="bold"),
legend.title=element_text(size=15, face = "bold"),
legend.text=element_text(size=15),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size = 13, face = "bold"),
panel.border = element_rect(colour = "black")) +
scale_fill_manual("Model Performance", labels= c("Poor", "Moderate", "Good"))
plot2 + geom_rect(mapping=aes(xmin=0.70, xmax=0.95, ymin=0.70, ymax=0.95), fill="green", size= 0.001, alpha=0.02) +
geom_rect(mapping=aes(xmin=0.60, xmax=0.95, ymin=0.60, ymax=0.70),  fill="gold2", size= 0.001, alpha=0.02) +
geom_rect(mapping=aes(xmin=0.60, xmax=0.70, ymin=0.70, ymax=0.95), fill="gold2", size= 0.001, alpha=0.02) +
geom_rect(mapping=aes(xmin=0.45, xmax=0.60, ymin=0.60, ymax=0.95), fill="firebrick2", size= 0.001, alpha=0.02) +
geom_rect(mapping=aes(xmin=0.45, xmax=0.95, ymin=0.45, ymax=0.60),  fill="firebrick2", size= 0.001, alpha=0.02) +
guides(fill = guide_legend(override.aes = list(alpha=0.2))) +
theme(axis.text = element_text(size=14),
axis.title=element_text(size=13,face="bold"),
legend.title=element_text(size=15, face = "bold"),
legend.text=element_text(size=15),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size = 13, face = "bold"),
panel.border = element_rect(colour = "black")) +
scale_fill_manual("Model Performance", labels= c("Poor", "Moderate", "Good"))
ggsave("~/Desktop/Graphs/Transferability/Transferability_paper2.png")
load("~/Desktop/Coarse_maxRAU/AU_coarse_NBG_P2.RData")
plot(env_predictors$roadnet)
spplot(env_predictors$roadnet)
spplot(env_predictors$roadnet, cut = 7)
spplot(env_predictors$roadnet, cut = 10)
spplot(env_predictors$roadnet, cut = 15)
spplot(env_predictors$roadnet, cut = 20)
spplot(env_predictors$roadnet, cut = 40)
spplot(env_predictors$roadnet, cut = 450)
spplot(env_predictors$roadnet, cut = 50)
spplot(env_predictors$roadnet)
load("~/Desktop/maxR_AU/AU_fine_NBG_P2.RData")
spplot(env_predictors$roadnet)
load("~/Desktop/maxR_AU/AU_fine_NBG_P2.RData")
spplot(env_predictors$tcoverd)
plot(env_predictors$tcoverd)
load("~/Desktop/Coarse_maxRAU/AU_coarse_NBG_P2.RData")
plot(env_predictors$tcoverd)
summary(env_predictors$tcoverd)
load("~/Desktop/maxR_AU/AU_fine_NBG_P2.RData")
summary(env_predictors$tcoverd)
load("/Users/ibekar/Desktop/maxR_AU/AU_fine_NBG_P2.RData")
load("~/Desktop/maxR_AU/AU_fine_NBG_P2.RData")
deneme <- maxent(env_selected_predictors, p, nbg=NBG[2], args=c('responsecurve= TRUE', 'randomtestpoints=50','randomseed=TRUE','jackknife=TRUE'))
deneme <- maxent(env_selected_predictors, p, nbg=NBG[2], args=c('responsecurves= TRUE', 'randomtestpoints=50','randomseed=TRUE','jackknife=TRUE'))
deneme <- maxent(env_selected_predictors, p, nbg=NBG[2], args=c('responsecurves=TRUE', 'randomtestpoints=50','randomseed=TRUE','jackknife=TRUE'))
View(deneme)
deneme
load("~/Desktop/Transfers/results/Fine_CR.RData")
CR_to_AU
get_avg <- function(ned) {
mean(ned[[1]]@auc,
ned[[2]]@auc,
ned[[3]]@auc,
ned[[4]]@auc,
ned[[5]]@auc,
ned[[6]]@auc,
ned[[7]]@auc,
ned[[8]]@auc,
ned[[9]]@auc,
ned[[10]]@auc)
}
get_avg(CR_to_AU)
load("~/Desktop/Graphs/Transferability/Graph_Transferability.RData")
AUC <- AUC_df %>%
mutate(test.auc = round(test.auc, 3)) %>%
mutate(model.auc = case_when(!grepl("_to_", AUC_df$M.name) ~ AUC_df$test.auc)) %>%
mutate(transfer.auc = case_when(grepl("_to_", AUC_df$M.name) ~ AUC_df$test.auc,
!grepl("_to_", AUC_df$M.name) ~ AUC_df$test.auc)) %>%
mutate(Alpha = if_else(AUC_df$TM_axis == "GR" | AUC_df$TM_axis == "VS" | AUC_df$TM_axis == "TI", "Sub-regional model", "Base model"))
AUC <- AUC %>%
mutate(model.auc = case_when(grepl("CH$", AUC$M.name) & grepl("Coarse.AUC", AUC$Resolution) ~ filter(AUC, M.name == "CH" & Resolution == "Coarse.AUC")[1,2],
grepl("SPA$", AUC$M.name) & grepl("Coarse.AUC", AUC$Resolution) ~ filter(AUC, M.name == "SPA" & Resolution == "Coarse.AUC")[1,2],
grepl("AU$", AUC$M.name) & grepl("Coarse.AUC", AUC$Resolution) ~ filter(AUC, M.name == "AU" & Resolution == "Coarse.AUC")[1,2],
grepl("TR$", AUC$M.name) & grepl("Coarse.AUC", AUC$Resolution) ~ filter(AUC, M.name == "TR" & Resolution == "Coarse.AUC")[1,2],
grepl("CR$", AUC$M.name) & grepl("Coarse.AUC", AUC$Resolution) ~ filter(AUC, M.name == "CR" & Resolution == "Coarse.AUC")[1,2],
grepl("GR$", AUC$M.name) & grepl("Coarse.AUC", AUC$Resolution) ~ filter(AUC, M.name == "GR" & Resolution == "Coarse.AUC")[1,2],
grepl("TI$", AUC$M.name) & grepl("Coarse.AUC", AUC$Resolution) ~ filter(AUC, M.name == "TI" & Resolution == "Coarse.AUC")[1,2],
grepl("VS$", AUC$M.name) & grepl("Coarse.AUC", AUC$Resolution) ~ filter(AUC, M.name == "VS" & Resolution == "Coarse.AUC")[1,2],
grepl("CH$", AUC$M.name) & grepl("Fine.AUC", AUC$Resolution) ~ filter(AUC, M.name == "CH" & Resolution == "Fine.AUC")[1,2],
grepl("SPA$", AUC$M.name) & grepl("Fine.AUC", AUC$Resolution) ~ filter(AUC, M.name == "SPA" & Resolution == "Fine.AUC")[1,2],
grepl("AU$", AUC$M.name) & grepl("Fine.AUC", AUC$Resolution) ~ filter(AUC, M.name == "AU" & Resolution == "Fine.AUC")[1,2],
grepl("TR$", AUC$M.name) & grepl("Fine.AUC", AUC$Resolution) ~ filter(AUC, M.name == "TR" & Resolution == "Fine.AUC")[1,2],
grepl("CR$", AUC$M.name) & grepl("Fine.AUC", AUC$Resolution) ~ filter(AUC, M.name == "CR" & Resolution == "Fine.AUC")[1,2],
grepl("GR$", AUC$M.name) & grepl("Fine.AUC", AUC$Resolution) ~ filter(AUC, M.name == "GR" & Resolution == "Fine.AUC")[1,2],
grepl("TI$", AUC$M.name) & grepl("Fine.AUC", AUC$Resolution) ~ filter(AUC, M.name == "TI" & Resolution == "Fine.AUC")[1,2],
grepl("VS$", AUC$M.name) & grepl("Fine.AUC", AUC$Resolution) ~ filter(AUC, M.name == "VS" & Resolution == "Fine.AUC")[1,2]))
AUC_base <- AUC %>%
filter(TM_axis %in% c("AU", "CH", "SPA", "TR", "CR")) %>%
filter(TA_axis %in% c("AU", "CH", "SPA", "TR"))
library(dplyr)
library(ggplot2)
library(ggrepel)
AUC <- AUC_df %>%
mutate(test.auc = round(test.auc, 3)) %>%
mutate(model.auc = case_when(!grepl("_to_", AUC_df$M.name) ~ AUC_df$test.auc)) %>%
mutate(transfer.auc = case_when(grepl("_to_", AUC_df$M.name) ~ AUC_df$test.auc,
!grepl("_to_", AUC_df$M.name) ~ AUC_df$test.auc)) %>%
mutate(Alpha = if_else(AUC_df$TM_axis == "GR" | AUC_df$TM_axis == "VS" | AUC_df$TM_axis == "TI", "Sub-regional model", "Base model"))
AUC <- AUC %>%
mutate(model.auc = case_when(grepl("CH$", AUC$M.name) & grepl("Coarse.AUC", AUC$Resolution) ~ filter(AUC, M.name == "CH" & Resolution == "Coarse.AUC")[1,2],
grepl("SPA$", AUC$M.name) & grepl("Coarse.AUC", AUC$Resolution) ~ filter(AUC, M.name == "SPA" & Resolution == "Coarse.AUC")[1,2],
grepl("AU$", AUC$M.name) & grepl("Coarse.AUC", AUC$Resolution) ~ filter(AUC, M.name == "AU" & Resolution == "Coarse.AUC")[1,2],
grepl("TR$", AUC$M.name) & grepl("Coarse.AUC", AUC$Resolution) ~ filter(AUC, M.name == "TR" & Resolution == "Coarse.AUC")[1,2],
grepl("CR$", AUC$M.name) & grepl("Coarse.AUC", AUC$Resolution) ~ filter(AUC, M.name == "CR" & Resolution == "Coarse.AUC")[1,2],
grepl("GR$", AUC$M.name) & grepl("Coarse.AUC", AUC$Resolution) ~ filter(AUC, M.name == "GR" & Resolution == "Coarse.AUC")[1,2],
grepl("TI$", AUC$M.name) & grepl("Coarse.AUC", AUC$Resolution) ~ filter(AUC, M.name == "TI" & Resolution == "Coarse.AUC")[1,2],
grepl("VS$", AUC$M.name) & grepl("Coarse.AUC", AUC$Resolution) ~ filter(AUC, M.name == "VS" & Resolution == "Coarse.AUC")[1,2],
grepl("CH$", AUC$M.name) & grepl("Fine.AUC", AUC$Resolution) ~ filter(AUC, M.name == "CH" & Resolution == "Fine.AUC")[1,2],
grepl("SPA$", AUC$M.name) & grepl("Fine.AUC", AUC$Resolution) ~ filter(AUC, M.name == "SPA" & Resolution == "Fine.AUC")[1,2],
grepl("AU$", AUC$M.name) & grepl("Fine.AUC", AUC$Resolution) ~ filter(AUC, M.name == "AU" & Resolution == "Fine.AUC")[1,2],
grepl("TR$", AUC$M.name) & grepl("Fine.AUC", AUC$Resolution) ~ filter(AUC, M.name == "TR" & Resolution == "Fine.AUC")[1,2],
grepl("CR$", AUC$M.name) & grepl("Fine.AUC", AUC$Resolution) ~ filter(AUC, M.name == "CR" & Resolution == "Fine.AUC")[1,2],
grepl("GR$", AUC$M.name) & grepl("Fine.AUC", AUC$Resolution) ~ filter(AUC, M.name == "GR" & Resolution == "Fine.AUC")[1,2],
grepl("TI$", AUC$M.name) & grepl("Fine.AUC", AUC$Resolution) ~ filter(AUC, M.name == "TI" & Resolution == "Fine.AUC")[1,2],
grepl("VS$", AUC$M.name) & grepl("Fine.AUC", AUC$Resolution) ~ filter(AUC, M.name == "VS" & Resolution == "Fine.AUC")[1,2]))
AUC_base <- AUC %>%
filter(TM_axis %in% c("AU", "CH", "SPA", "TR", "CR")) %>%
filter(TA_axis %in% c("AU", "CH", "SPA", "TR"))
AUC_base
View(AUC_base)
library(dplyr)
############################              MODEL TRANSFER            ################################
# load the model that are going to be transferred
load("~/Desktop/Transfers/results/Coarse_TR.RData")
TR_to_CH
load("~/Desktop/Prediction/Outputs/PredictionMaps_Coarse.RData")
CH_map
plot(CH_map)
plot(transfer_TR[[1]]$mean)
load("~/Desktop/Prediction/Outputs/PredictionMaps_Fine.RData")
plot(CH_map)
plot(transfer_TR[[1]]$mean)
p_grid <- seq( from=0 , to=1 , length.out=1000 )
prior <- rep( 1 , 1000 )
likelihood <- dbinom( 6 , size=9 , prob=p_grid )
posterior <- likelihood * prior
posterior <- posterior / sum(posterior)
samples <- sample( p_grid , prob=posterior , size=1e4 , replace=TRUE )
plot( samples)
library(rethinking)
install.packages(c("coda","mvtnorm","devtools","loo"))
install.packages(c("coda", "mvtnorm", "devtools", "loo"))
devtools::install_github("rmcelreath/rethinking")
library(rethinking)
dens(samples)
plot(posterior)
dens(samples)
plot(posterior)
samples
setwd("~/GitHub/R4DS/TidyTuesdays/Week29")
library(tidyverse)
college <- as.tibble(read.csv("CollegeMajor.csv"))
college <- college %>%
filter(Major_category != "Interdisciplinary")
colourCount = length(unique(college$Major_category))
colourCount
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
ggplot(college, aes(reorder(Major_category, Unemployment_rate, FUN= mean),
Unemployment_rate,
fill= Major_category)) +
geom_boxplot() +
labs( title = "Unemployment Rates by Major Categories",
subtitle= "Colors are not ordered",
x= "Major Category",
y = "Unemployment rate",
fill= "Major Category") +
coord_flip() +
scale_fill_manual(values = getPalette(colourCount))
library("RColorBrewer", lib.loc="~/Library/R/3.3/library")
library(RColorBrewer)
ggplot(college, aes(reorder(Major_category, Unemployment_rate, FUN= mean),
Unemployment_rate,
fill= Major_category)) +
geom_boxplot() +
labs( title = "Unemployment Rates by Major Categories",
subtitle= "Colors are not ordered",
x= "Major Category",
y = "Unemployment rate",
fill= "Major Category") +
coord_flip() +
scale_fill_manual(values = getPalette(colourCount))
aa <- ggplot(college, aes(reorder(Major_category, Unemployment_rate, FUN= mean),
Unemployment_rate,
fill= Major_category)) +
geom_boxplot() +
labs( title = "Unemployment Rates by Major Categories",
subtitle= "Colors are not ordered",
x= "Major Category",
y = "Unemployment rate",
fill= "Major Category") +
coord_flip() +
aa + scale_fill_brewer()
aa <- ggplot(college, aes(reorder(Major_category, Unemployment_rate, FUN= mean),
Unemployment_rate,
fill= Major_category)) +
geom_boxplot() +
labs( title = "Unemployment Rates by Major Categories",
subtitle= "Colors are not ordered",
x= "Major Category",
y = "Unemployment rate",
fill= "Major Category") +
coord_flip()
aa + scale_fill_brewer()
aa + scale_fill_brewer(palette = "Set1")
aa + scale_fill_brewer(values = getPalette(colourCount))
colourCount = length(unique(college$Major_category))
aa + scale_fill_brewer(values = getPalette(colourCount))
aa + scale_fill_brewer(values = getPalette(15))
colourCount = length(unique(college$Major_category))
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
aa + scale_fill_brewer(values = getPalette(colourCount))
getPalette = colorRampPalette(brewer.pal(15, "Set1"))
getPalette = colorRampPalette(brewer.pal(15, "Set2"))
colourCount = length(unique(college$Major_category))
getPalette = colorRampPalette(brewer.pal(9, "Set2"))
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
aa + scale_fill_brewer(values = getPalette(colourCount))
getPalette = colorRampPalette("Set1", 9)
getPalette = colorRampPalette(Set1)(9)
getPalette = colorRampPalette("Set1")(9)
coul = brewer.pal(4, "BuPu")
getPalette = colorRampPalette(coul)(9)
getPalette
getPalette = colorRampPalette(coul)(15)
aa + scale_fill_brewer(values = getPalette)
getPalette
aa + scale_fill_brewer(col = getPalette)
aa + scale_fill_brewer(palette = getPalette)
coul = brewer.pal(8, "Spectral")
getPalette = colorRampPalette(coul)(15)
plot(getPalette)
aa <- ggplot(college, aes(reorder(Major_category, Unemployment_rate, FUN= mean),
Unemployment_rate,
fill= Major_category)) +
geom_boxplot() +
labs( title = "Unemployment Rates by Major Categories",
subtitle= "Colors are not ordered",
x= "Major Category",
y = "Unemployment rate",
fill= "Major Category") +
coord_flip()
aa + scale_fill_brewer(palette = getPalette)
coul = brewer.pal(8, "Spectral")
getPalette = colorRampPalette(coul)(15)
aa + scale_fill_brewer(palette = getPalette)
colourCount = length(unique(college$Major_category))
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
aa <- ggplot(college, aes(reorder(Major_category, Unemployment_rate, FUN= mean),
Unemployment_rate,
fill=getPalette(colourCount))) +
geom_boxplot() +
labs( title = "Unemployment Rates by Major Categories",
subtitle= "Colors are not ordered",
x= "Major Category",
y = "Unemployment rate",
fill= "Major Category") +
coord_flip()
aa
colourCount = length(unique(college$Major_category))
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
ggplot(college, aes(reorder(Major_category, Unemployment_rate, FUN= mean),
Unemployment_rate,
fill=getPalette(colourCount))) +
geom_boxplot() +
labs( title = "Unemployment Rates by Major Categories",
subtitle= "Colors are not ordered",
x= "Major Category",
y = "Unemployment rate",
fill= "Major Category") +
coord_flip()
colourCount
ggplot(college, aes(reorder(Major_category, Unemployment_rate, FUN= mean),
Unemployment_rate,
fill=getPalette(colourCount)))
getPalette(colourCount)
getPalette
str(college$Major_category)
colourCount = length(unique(college$Major_category))
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
levels(college$Major_category)
levels(college$Major_category)[-12]
levels(college$Major_category) <- levels(college$Major_category)[-12]
levels(droplevels(college$Major_category))
levels(college$Major_category)
levels(college$Major_category) <- levels(droplevels(college$Major_category))
droplevels(college$Major_category)
college3 <- droplevels(college$Major_category)
college3
droplevels(college$Major_category)
college$Major_category
college3 <- droplevels(college)
college <- droplevels(college)
ggplot(college, aes(reorder(Major_category, Unemployment_rate, FUN= mean), Unemployment_rate,
fill=getPalette(colourCount))
)+
geom_boxplot() +
labs( title = "Unemployment Rates by Major Categories",
subtitle= "Colors are not ordered",
x= "Major Category",
y = "Unemployment rate",
fill= "Major Category") +
coord_flip()
setwd("~/GitHub/R4DS/TidyTuesdays/Week29")
library(tidyverse)
library(ggplot2)
college <- as.tibble(read.csv("CollegeMajor.csv"))
college <- college %>%
filter(Major_category != "Interdisciplinary")
ggplot(college, aes(reorder(Major_category, Unemployment_rate, FUN= mean),
Unemployment_rate,
fill= Major_category)) +
geom_boxplot() +
labs(title = "Unemployment rate by major categories",
subtitle= "Colors are not ordered",
x = "Major Category",
y = "Unemployment",
fill= "Category") +
coord_flip()
ggplot(college, aes(reorder(Major_category, Unemployment_rate, FUN= mean),
Unemployment_rate,
fill= reorder(Major_category, Unemployment_rate))) +
geom_boxplot() +
labs(title = "Unemployment rate by major categories",
subtitle= "Colors are ordered",
x = "Major Category",
y = "Unemployment",
fill= "Category") +
coord_flip()
ggplot(college, aes(reorder(Major_category, Unemployment_rate, FUN= median),
Unemployment_rate, color= Major_category)) +
geom_boxplot() +
coord_flip() +
theme_light()
ggplot(college, aes(ShareWomen, Median, group= Major_category)) +
geom_point()
